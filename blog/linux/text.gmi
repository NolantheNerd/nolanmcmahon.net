=> ../../index.gmi Home

# Text Editor

=> ../blog_home.gmi Back to Blog
=> ../linux_home.gmi Back to the Software I Use

I spend the vast majority of my time on a computer editing text. Whether I'm configuring how my system looks, writing blog entries, or developing software I'm editing plain text files. As a consequence, I love plain text! Plain text is by far the best way to digitally store, modify, and transmit information. Why?

* Text files can easily be version controlled with git.
* Text files can easily be compared with diffs.
* Text files can easily be manipulated with scripts.
* Text files can easily be searched by their content with tools like grep.
* Text files can easily be compressed.
* Text files can easily be shared with others, regardless of the computer, OS, or suite of programs that they use.
* Text files can be powerfully edited with any text editor (for example to make regex replacements).
* Text files do not take up much storage space.
* Text files are far more persistent through time. Proprietary and/or complex file types will come and go but plain text will always be readable.

Since I spend such a considerable amount of time editing text, I want to be able to edit text as efficiently as possible. Thus, I've made vim my text editor.

### Side Note

For quite a while, I used neovim as my text editor which is marketed to be "just like vim, but better". I spent a considerable amount of time with neovim, but I really couldn't discern any differences between it and vim. Now I'm not particularly motivated to use a new piece of technology just because it's vaguely "better" so I've switched back to vim proper. If however, you have some list of reasons why neovim is undeniably the superior program and should unequivocally replace regular ol' vim, shoot me an email. I'd love to hear your motivations.

## Installation

On Arch GNU/Linux: 

> sudo pacman -S vim

### Basic Vim Settings

If you already know how to use vim, the first thing you'll want to do is to start changing some of vim's settings. Take a look at my .vimrc if you are curious about how I modify vim. 

=> docs/vimrc.txt My .vimrc

Otherwise, for those who don't already know how to use vim, let me explain. Vim's settings are stored in a file called .vimrc in your home directory. Vim loads this file each time it starts and applies each setting you specify here to the new vim environment. I, for example, like to have the lines of my files numbered when I'm viewing or editing them, so I have:

> set number

in my .vimrc. There are many, many more available settings for you to play with in vim but if you are not familiar with how vim works yet, skip down to the usage section. No need to configure settings before you understand the basics of using vim.

### Plugins

Another way to modify vim is to use vim extensions. If you aren't aware, you can extend vim with other features that are not built in by default using so called plugins. These plugins are generally written in Vim Script and can be managed using a plugin manager like vim-plug.

=> https://github.com/junegunn/vim-plug vim-plug GitHub Page

As instucted in the vim-plug README, you can install vim-plug using:

> curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

This creates a directory in your home directory called .vim where all of your extension scripts will be stored. Then it is just a matter of adding:

> call plug#begin()
> 	Plug 'github_repo_for_plugin'
> call plug#end()

to your .vimrc to add plugins to your vim environment. Among others, I use:

=> https://github.com/sheerun/vim-polyglot sheerun/vim-polyglot
=> https://github.com/petRUShka/vim-sage petRUShka/vim-sage
=> https://github.com/itchyny/lightline.vim itchyny/lightline.vim
=> https://github.com/junegunn/fzf.vim junegunn/fzf.vim
=> https://github.com/srcery-colors/srcery-vim srcery-colors/srcery-vim
=> https://github.com/markonm/traces.vim markonm/traces.vim
=> https://github.com/junegunn/goyo.vim junegunn/goyo.vim
=> https://github.com/junegunn/limelight.vim junegunn/limelight.vim

To install/update these plugins after adding them to your .vimrc:

> :PlugInstall
> :PlugUpdate

I use one vim plugin which is not compatible with vim-plug called gemini-vim-syntax. You can find it here along with instructions on how to install it:

=> https:/tildegit.org/sloum/gemini-vim-syntax gemini-vim-syntax

### Macros

I write alot of math using eqn in groff with vim. As a consequence, I end up having to do alot of text input for mathematical objects like matrices. To simplify my life alot, and speed up my text input, I've written some macros into my .vimrc that put in matrix notation for me in just a few keystrokes.

This is done in two steps. First, I define a chunk of marker text that I can safely insert into the preformatted text that will mark important locations within the formatting. When I insert some preformatted text, I insert this marker in each place where I need to manually input some kind of value. Then, I define a new macro which removes the next instance of the marker and puts me into insert mode in that location. This allows me to rapidly edit important values within the preformatted text.

Secondly, I've written a whole bunch of insert mode macros to do the work of inserting the formatting on my behalf. For example:

> autocmd FileType nroff inoremap ;mam23 left [<Enter>matrix {<Enter>ccol {<++> above <++>}<Enter>ccol {<++> above <++>}<Enter>}<Enter>left \|<Enter>matrix {<Enter>ccol {<++> above <++>}<Enter>}<Enter>right ]<Enter><++><Esc>8k3lc4l

inserts a 2x3 augmented matrix formatted using eqn syntax. If I'm in insert mode and editing a file with the nroff file type, all I have to type is ;mam23 and I get all the matrix syntax for free. Then, using my space space macro, I can move to each <++> marker and add the value of the matrix at that location. Pretty sweet eh? I will certainly continue to add more macros like this as time goes on.

## Usage

If you've never used vim before, you'll want to get some instructions on the basics. Open up a terminal and type:

> vimtutor

This will guide you through the basics of vim quite nicely.

=> ../linux_home.gmi Back to the Software I Use
=> ../blog_home.gmi Back to Blog
