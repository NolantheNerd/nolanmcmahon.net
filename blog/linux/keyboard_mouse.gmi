=> ../../index.gmi Home

# Keyboard Shortcuts & Mouse Removal

=> ../blog_home.gmi Back to Blog
=> ../linux_home.gmi Back to the Software I Use

Wherever possible, I avoid using a mouse. It is so much more convenient to use a series of keyboard shortcuts than it is to constantly have to reach over to grab a mouse to click on some GUI button. At home, I use a keyboard exclusively. At work, I'm forced to use proprietary pieces of software like Slack which have completely inadequate keyboard shortcuts, so I end up reaching for a mouse. Wherever possible, use the keyboard!

My relationships with the keyboard and mouse are broken up into three parts:

1. I set universal keybindings to my keyboard.
2. I remap keys on my keyboard to other keys.
3. I hide the mouse cursor when it's not moving.

# Universal Keybinds

There is absolutely no need to click on anything in a well designed desktop environment. Everything from opening a program or file, to changing the volume should be completely doable with the keyboard. By simply adopting some keybindings to perform common computer tasks, you can make your computing experience far more efficient!

## Installation

On Arch GNU/Linux:

> sudo pacman -S sxhkd

## Usage

To configure sxhkd, write an sxhkdrc file into the ~/.config/sxhkd/ directory and call run sxhkd like this:

> pgrep -x sxhkd > /dev/null || sxhkd &

I call sxhkd in my bspwmrc file - checkout the page about my window manager for more information.

sxhkd's syntax is straight forward and makes it really easy to bind key combinations to do whatever you'd like within your Linux environment. Here, for example, is how I bind keys to open certain programs:

> # terminal emulator
> super + Return
> 	st
> 
> # program launcher
> super + @space
> 	dmenu_run
> 
> # web browser
> super + b
> 	qutebrowser
> 
> # file viewer
> super + f
> 	st -e ranger

Checkout my entire sxhkdrc file for both my custom keybinds as well as those that control my window manager: bspwm.

=> docs/sxhkdrc My sxhkdrc File

# Remapping Keys

Caps Lock is a completely useless key in a fantastic location. Think about it. It's right on home-row, and it does poorly what the Shift key already does well. Every other modifier key (Super, Alt, Ctrl, Shift) works by being held down and then allowing you to press another key. Caps Lock is the only modifier that toggles. Useless! The Escape key on the other hand, is a wonderfully useful key in a terrible location. It's hanging out way up in the top corner of your keyboard. If you are a Vim user, this is unacceptably far to reach just to leave Insert Mode. So, why not remap the Caps Lock key to be Escape?

## Installation

On Arch GNU/Linux:

> sudo pacman -S xorg-xset xorg-xmodmap xorg-setxkbmap xcape xdotool

## Usage

I use a script, which is based on the one Luke Smith has in Voidrice, to remap:

* Caps Lock to Escape
* Menu to Super

=> https://github.com/lukesmithxyz/voidrice

I call this script from within my .xinitrc file.

=> docs/xinitrc My xinitrc File

> #!/bin/sh
> 
> # This script is called on startup to remap keys.
> # Increase key speed via a rate change
> xset r rate 300 50
> # Map the caps lock key to super...
> setxkbmap -option caps:escape
> # Map the menu button to right super as well.
> xmodmap -e 'keycode 135 = Super_R'
> # Turn off the caps lock if on since there is no longer a key for it.
> xset -q | grep "Caps Lock:\s*on" && xdotool key Caps_Lock

=> docs/remapesc Remap Script

I used to use a different version of that script which also made Caps Lock behave like Super if it was held down and another key was pressed at the same time. I got tired of accidentally opening a different program when switching from Insert Mode to Normal Mode in Vim, so I removed that feature, but the script that does that is here:

> #!/bin/sh
> 
> # This script is called on startup to remap keys.
> # Increase key speed via a rate change
> xset r rate 300 50
> # Map the caps lock key to super...
> setxkbmap -option caps:super
> # But when it is pressed only once, treat it as escape.
> killall xcape 2>/dev/null ; xcape -e 'Super_L=Escape'
> xcape -e 'Super_R=Escape'
> # Map the menu button to right super as well.
> xmodmap -e 'keycode 135 = Super_R'
> # Turn off the caps lock if on since there is no longer a key for it.
> xset -q | grep "Caps Lock:\s*on" && xdotool key Caps_Lock

=> docs/remap Remap Script

# Hiding the Mouse

As a consequence of my love for keyboard shortcuts, I have very little need for the mouse. The mouse pointer, then, is then mostly in the way. I want it to disappear unless I am actively moving the mouse to click on something. That is the functionality that I can get out of a program called unclutter.

## Installation

On Arch GNU/Linux:

> sudo pacman -S unclutter

## Usage

To hide the mouse cursor, simply call:

> unclutter --timeout 3 --jitter 25 --ignore-scrolling --start-hidden &

These options are explained in the man page for unclutter. I simply include this line in my bspwmrc file.

=> ../linux_home.gmi Back to the Software I Use
=> ../blog_home.gmi Back to Blog
